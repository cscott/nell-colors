/* This stylesheet should be @imported inside a context identifying the
 * dialog's wrapper div.   For example:
 *  #brushdialog { @import "brushdialog"; }
 */

$numbrushes: 12;

@mixin no-select {
  // disable text selection in this element
  -webkit-user-select: none;
  -moz-user-select: -moz-none;
}
@mixin outline($value) {
  -moz-outline: $value;
  outline: $value;
}
@mixin no-outline {
  @include outline(0px none);
}

$break-small: 484px;
@mixin respond-to($media) {
  @if $media == short-screen {
    @media only screen and (max-height: $break-small) { @content; }
  }
}

& {
  position: absolute; top: 0;
  background: #404040; /* "toolbar grey" */
  /* horizontal centering with max-width */
  left: 0; right: 0; margin-left: auto; margin-right: auto;

  /* option 1: use extra space if available */
  max-width: 360px;
  height: 100%;
  max-height: 550px;

  overflow: hidden;

  @include border-bottom-radius(15px);
  @include transition(transform 1s);
  @include translate3d(0,-590px,0); // 3d for safari; matches max-height above
  @include transform-origin(center, top);
  @include no-select;
}
&.visible {
  @include translate3d(0,0,0);
}
a:focus,
.wheel > .color:focus {
  @include outline(2px dotted #888);
}

.panes {
  width: 200%;
  @include translate3d(0,0,0);
   /* duration is 0s to allow quick configuration when invisible */
  @include transition(transform 0s ease-in-out);

  @include no-select;

  @include pie-clearfix;
}
&.visible .panes {
  /* only animate when visible */
  @include transition-duration(0.5s);
}
.color_options,
.brush_options {
  float: left;
  width: 50%;
  min-width: 50%; /* used for flexbox layout, below */
  /* workaround for FF not clipping .allbrushes:before to .scrollwrapper
     properly: */
  overflow: hidden;
  /* hiding inactive panes is needed to work around FF keyboard focus issues */
  visibility: hidden;
  @include transition(visibility 0s linear 0.5s);
}
&.color .color_options,
&.brush .brush_options {
  visibility: visible;
  @include transition-delay(0s);
}
&.brush .panes {
  @include translate3d(-50%,0,0);
}
&.color .brush_options *,
&.brush .color_options * {
  /* this should work, but FF removed it:
   *   https://bugzilla.mozilla.org/show_bug.cgi?id=379939 */
  -moz-user-focus: ignore;
      user-focus: ignore;
  -moz-user-input: none;
       user-input: none;
}

/* --------- page selector and close widgets ------- */
.page_select {
  text-align: center;
  @include nowrap;

  & > a {
    @include inline-block;
    width: 50%;
    min-width: 42px;
    min-height: 42px;
    @include respond-to(short-screen) { min-height: 24px; }

    position: relative; /* use this as position reference for pseudo-elements */

    &:focus { @include no-outline; }

    &:before, & > span {
      position: absolute; top: 0; bottom: 0;
      display: block;
      width: 42px; height: 42px;
      margin-left: -21px; margin-right: -21px;
      @include box-sizing(border-box);
      border: 2px solid transparent;
      content: ""; /* or else :before doesn't show up */
      background-repeat: no-repeat;
      @include respond-to(short-screen) {
        width: 24px; height: 24px;
        margin-left: -12px; margin-right: -12px;
      }
    }
    &:before {
      @include border-radius(5px);
      border-color: #404040;
    }
    &:focus:before {
      border: 2px dotted #555;
    }
    &.brush_select:before, &.brush_select > span {
      left: 33%;
    }
    &.color_select:before, &.color_select > span {
      right: 33%;
    }
    &.brush_select > span {
      background-image: image-url('tool-brush.svg');
      @include background-size(49px);
      @include respond-to(short-screen) { @include background-size(26px); }
      background-position: center center;
    }
    &.color_select > span {
      border: 2px solid #666;
      @include border-radius(50%);
      background: currentColor;
      width: 34px; height: 34px; top: 4px;
      margin-left: -17px; margin-right: -17px;
      @include respond-to(short-screen) {
        width: 16px; height: 16px;
        margin-left: -8px; margin-right: -8px;
      }
      &:before {
        /* checkerboard pattern behind the color swatch */
        display: block;
        position: absolute;
        top: 0; bottom: 0; left: 0; right: 0;
        @include border-radius(50%);
        background: image-url('checkerboard.svg');
        background-position: center;
        content: "";
        z-index: -1; /* put this behind the color swatch */
      }
    }
  }
}
&.brush a.brush_select,
&.color a.color_select {
  /* selected */
  &:before {
    background-color: #666; /* highlight */
  }
  &:before:focus {
    border-color: #888; /* lighten focus border when highlighted */
  }
}
&.color a.color_select > span {
  border-color: #888;
}

& > .close_pane {
  text-align: center;

  .closer {
    display: block;
    background: image-url('up-arrow.svg') no-repeat;
    background-size: 32px 20px;
    height: 20px;
    background-position: center center;
    @include respond-to(short-screen) {
      height: 10px;
      background-size: 16px 10px;
    }
  }
}

/* --------- general slider styling --------- */
%fd-round-with-border {
  border: 2px solid #666;
  @include border-radius(5px);
}
.fd-slider {
  @include inline-block;
  position: relative;
  width: 302px; height: 30px;
  @include respond-to(short-screen) { height: 20px; }
  text-align: center;
  border: 0 none;
  cursor:pointer;
  @include no-select;
}
.fd-slider-inner {
  position: absolute; left: 0; right: 0;
  display: block;
  z-index: 1;
  top: 8px;
  @include respond-to(short-screen) { top: 3px; }
  height:10px;
  text-align:left;
  background: #333;
  @extend %fd-round-with-border;
}
.fd-slider-bar {
  @extend .fd-slider-inner;
  display: none; /* this would be a line running down the center typically */
  z-index: 2;
}
.fd-slider-handle {
  position: absolute; top: 0; left: 0;
  display: block;
  padding: 0; margin: 0;
  z-index: 3;
  width: 15px; height: 30px;
  @include respond-to(short-screen) { height: 20px; }
  background: #8c8c8c;
  @include box-sizing(border-box);
  @include no-select;
  @extend %fd-round-with-border;
  &, &:focus { @include no-outline; }
  &:focus::-moz-focus-inner { border-color: transparent; }
}
/* hover effect */
.fd-slider-hover .fd-slider-handle {
  border: 2px solid #777;
  background: #999
}
/* focus effect */
.fd-slider-handle:focus,
.focused .fd-slider-handle {
  border: 2px solid #888;
  background: #ccc;
}
/* focused *and* hovered */
.focused.fd-slider-hover .fd-slider-handle {
  background: #ddd;
}

input.fd_slider { display: none; } /* hide slider input */

/* -------------- brush options ------------- */
.stroke {
  position: relative;
  height: 129px;
  @include respond-to(short-screen) {
    margin-top: -5px; margin-bottom: -5px;
  }
}
.shape {
  display: block;
  border: 2px solid #666;
  background: white;
  margin: 0 2px;
  position: relative;
  -moz-user-focus: normal; /* allow to take focus */
  &:focus {
    border: 2px dotted #888;
    @include no-outline;
  }
  &:before, &:after {
    content: "";
    position: absolute; left: 50%; top: 0;
    width: 0; height: 0;
  }
  &:before {
    margin-left: -11px;
    border-left: 11px solid transparent;
    border-right: 11px solid transparent;
    border-top: 11px solid #666;
  }
  &:after {
    top: -3px;
    margin-left: -11px;
    border-left: 11px solid transparent;
    border-right: 11px solid transparent;
    border-top: 11px solid #404040;
  }

  & > .scrollwrapper {
    height: 120px;
    overflow: hidden;

    & > .allbrushes {
      /* $numbrushes 100px brushes, plus borders on each side */
      height: 100px;
      /* we want n*100px + (100% - 2*50px) wide.  use *non* borderbox sizing
       * to accomplish this. */
      @include box-sizing(content-box);
      width: 100%;
      border-right: ($numbrushes * 100px) - (2*50px) solid transparent;

      &:before {
        content: "";
        position: absolute; top: 8px;
        /* left hand edge should be at 50% - 50px */
        left: 50%; margin-left: -50px;
        width: $numbrushes * 100px;
        height: 100px;
        background-image: url('../brushes/brush-tile-129.png');
        background-repeat: no-repeat;
        @include background-size(auto 100px);
      }
    }
    @include respond-to(short-screen) {
      height: 60px;
      & > .allbrushes {
        height: 50px;
        border-right: ($numbrushes*50px) - (2*25px) solid transparent;
        &:before {
          top: 3px;
          margin-left: -25px;
          width: $numbrushes * 50px;
          @include background-size(auto 50px);
        }
      }
    }
  }
}
%plusminus {
  display: block;
  position: absolute; bottom: 0;
  width: 32px; height: 32px;
  background-position: center center;
  background-repeat: no-repeat;
  margin-top: -1px; margin-bottom: -1px; /* effectively 30px tall */
  @include respond-to(short-screen) {
    height: 22px; margin-top: 0; margin-bottom: -2px;
    background-size: auto 100%;
  }
}
.minus {
  @extend %plusminus;
  background-image: image-url('circle-minus.svg');
}
.plus {
  @extend %plusminus;
  background-image: image-url('circle-plus.svg');
}
.spacing {
  margin-top: 10px;
  @include respond-to(short-screen) { margin-top: 2px; }
}
.size,
.spacing {
  text-align: center;
  @include nowrap;
  /* use border-box sizing, and then stick the buttons in the fixed-width
   * border areas.  32px for buttons + 12px margin on each side. */
  @include box-sizing(border-box);
  border-right: 56px solid transparent;
  border-left: 56px solid transparent;
  width: 100%;
  position: relative;
  /* limit max width, but center */
  max-width: 302px + 2*12px + 32px;
  margin-left: auto; margin-right: auto;

  .minus {
    left: -12px - 32px;
  }
  .plus {
    right: -12px - 32px;
  }

  .fd-slider {
    width: 100%;
  }

  .caption {
    color: #888;
    text-align: left;
    margin-left: -12px - 32px;
    margin-bottom: 1px;
    font-size: 10px;
    @include respond-to(short-screen) { display: none; }
  }
}
.spacing .caption:after  { content: attr(data-amount) "%"; }
.size .caption:after  { content: attr(data-amount) "px"; }

/* English (default) strings */
.spacing .caption:before { content: "Spacing: "; }
.size .caption:before { content: "Size: "; }
/* demo for localization */
&:lang(es) {
  .spacing .caption:before { content: "Espaciado: "; }
  .size .caption:before { content: "Tama\F1 o: "; }
}

/* -------------- color options ------------- */
.swatches {
  /* put padding in border */
  border-right: 8px solid transparent;
  border-left:  8px solid transparent;
  @include box-sizing(border-box);
  width: 100%;
  max-width: 302px + 2*8px + 2*4px;
  margin-left: auto; margin-right: auto;
  position: relative;
  text-align: center;
  @include nowrap;

  & > a {
    position: relative;
    @include inline-block;
    @include box-sizing(border-box);
    width: 25%;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    height: 32px;
    @include respond-to(short-screen) { height: 20px; }
    & > span {
      position: absolute;
      top: 0; bottom: 0; left: 0; right: 0;
      background: currentColor;
      border: 2px solid #666;
    }
    &:focus { @include no-outline; }
    &[href]:focus > span {
      border: 2px dotted #888;
    }

    &.old, &.old > span, &.old[href]:focus > span { border-right: none; }
    &.new, &.new > span, &.new:focus > span { border-left: none; }

    &.new, &.old {
      & > span:before {
        position: absolute; left: 0; right: 0; top: 0; bottom: 0;
        background: image-url('checkerboard.svg');
        background-position: center;
        z-index: -1;
        content: "";
      }
    }

    &.white > span {
      background: white;
      @include border-left-radius(5px);
    }
    &.black > span {
      background: black;
      @include border-right-radius(5px);
    }
  }
}

.wheel {
  text-align: center;
  position: relative;
  margin: 5px auto; /* center */
  @include respond-to(short-screen) { margin-bottom: 3px; }
  width: 302px;
  @include no-select;

  %circle {
    @include border-radius(50%);
    cursor: pointer;
    @include no-select;
  }
  & > .color {
    @extend %circle;
    @include inline-block;
    position: relative; /* z-ordering with thumb */
    border: 2px solid #666;
    width: 298px; height: 298px;
    //background: image-url('color-wheel.svg');
    background-image: image-url('color-wheel.png');
    @include background-size(100%);
    @include respond-to(short-screen) {
      width: 150px; height: 150px;
    }

    & > div {
      position: absolute;
      top: 0; bottom: 0; left: 0; right: 0;
      @extend %circle;

      &.white {
        background: white;
        opacity: 0;
      }
      &.black {
        background: black;
        opacity: 0;
      }
    }
  }
  & > .thumb {
    position: absolute; left: 50%; top: 50%; /* offset past border */
    @include box-sizing(border-box);
    width: 26px; height: 26px;
    margin-left: -13px; margin-top: -13px;
    border: 2px solid black;
    background: currentColor;
    pointer-events: none;
    @include translate3d(0,0,0);
    @extend %circle;

    &:after {
      position: absolute; left: -1px; right: -1px; top: -1px; bottom: -1px;
      border: 2px solid white;
      content: "";
      pointer-events: none;
      @extend %circle;
    }
  }
}

%fullwidth-slider {
  /* put padding in border so we can use 100% width for slider */
  border-right: 12px solid transparent;
  border-left: 12px solid transparent;
  @include box-sizing(border-box);
  width: 100%;
  position: relative;
  text-align: center;

  .fd-slider {
    width: 100%;
    max-width: 302px;
  }
}
.lightness {
  @extend %fullwidth-slider;

  .fd-slider-inner {
    @include background(linear-gradient(left, black, currentColor 50%, white 100%));
    /* XXX compass doesn't emit the proper unprefixed gradient */
    background: linear-gradient(to right, black, currentColor 50%, white 100%);
  }
}

/* -------------- opacity slider ------------ */
.opacity_options {
  @extend %fullwidth-slider;

  .fd-slider-inner {
    background: image-url('checkerboard.svg');
    background-position: center;
  }
  .fd-slider-bar {
    display: block;
    @include background(linear-gradient(left, transparent, currentColor 100%));
    /* XXX compass doesn't emit the proper unprefixed gradient */
    background: linear-gradient(to right, transparent, currentColor 100%);
  }
}

/* -------- interwidget spacing -------- */
/* minimum spacings */
.page_select, .spacing, .size, .lightness, .opacity_options, .close_pane {
  border-top: 2px solid transparent;
  border-bottom: 2px solid transparent;
}
@include respond-to(short-screen) {
  .page_select { border-top: none; border-bottom: none; }
}

/* ---- experimental flex box stuff to better distribute vertical space ---- */
// in theory we could use something like
//@supports (display: flex) or (display: -webkit-flex) or (display: -moz-flex)
// to enable this, but webkit doesn't support @supports...

/* version with old 'box' version of flexbox spec */
/* only really seems to work on -webkit */
@if false {
  &, .brush_options, .color_options {
    @include display-box;
    @include box-orient(vertical);
    @include box-pack(justify);
  }
  .panes {
    @include display-box;
    @include box-orient(horizontal);
  }
  .page_select, .panes, .opacity_options, .spacer {
    @include box-flex(3);
  }
  .panes {
    @include box-flex(1);
  }
  .brush_options > *, .color_options > * {
    margin-top: auto;
    margin-bottom: auto;
    min-height: auto;
    @media only screen and (max-height: 320px) {
      &.stroke { margin-top: -5px; margin-bottom: -5px; }
    }
  }
}

/* new flexbox spec, not enabled by default on mozilla yet */
/* use pref("layout.css.flexbox.enabled", true); to enable on mozilla */

// first, hack in some compass/prefix support:
@mixin display-flex {
  @include experimental-value(display, flex, -moz, -webkit, not -o, -ms, not -khtml, official);
}
@mixin flex-direction($direction) {
  $direction: unquote($direction);
  @include experimental(flex-direction, $direction, -moz, -webkit, not -o, -ms, not -khtml, official);
}
@mixin flex-grow($amount) {
  $amount: unquote($amount);
  @include experimental(flex-grow, $amount, -moz, -webkit, not -o, -ms, not -khtml, official);
}
@mixin flex-shrink($amount) {
  $amount: unquote($amount);
  @include experimental(flex-shrink, $amount, -moz, -webkit, not -o, -ms, not -khtml, official);
}
@mixin flex-align-items($value) {
  $value: unquote($value);
  @include experimental(align-items, $value, -moz, -webkit, not -o, -ms, not -khtml, official);
}

// now here are the CSS rules:
@if true {
  &, %vertical-flex {
    @include display-flex;
    @include flex-direction(column);
  }
  .opacity_options {
    @include flex-grow(0.4);
    @include respond-to(short-screen) { @include flex-grow(0.2); }

    /* vertically center slider */
    @extend %vertical-flex;
    @include flex-align-items(center);
    & > div { margin-top: auto; margin-bottom: auto; }
  }
  .panes {
    @include flex-grow(1);
    @include display-flex;
    @include flex-direction(row);
    @include respond-to(short-screen) {
      &, & .stroke, & .color, & .wheel {
        min-height: 0; /* allow these elements to shrink further */
      }
    }
  }
  .brush_options, .color_options {
    @extend %vertical-flex;
    & > * {
      margin-top: auto;
      margin-bottom: auto;
    }
    @media only screen and (max-height: 320px) {
      & > .stroke { margin-top: -5px; margin-bottom: -5px; }
    }
  }
  // only firefox supports @supports, but webkit supports flex so all's good.
  @supports not ((display: flex) or
                 (display: -webkit-flex) or
                 (display: -moz-flex)) {
    & { height: auto; }
    .wheel { margin: 5px auto; }
    .spacing {
      margin-top: 10px;
      @include respond-to(short-screen) { margin-top: 2px; }
    }
  }
}
